package com.inventage.airmock.kernel.util;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class SAMLUtilsTest {

    // The content of SAML_RESPONSE.xml is Base64 encoded and then used as the input for the SAMLUtils.getEncodedAssertion method.
    // The result is the Base64 encoded SAML assertion, which is contained in the SAML response.
    // The encoding is done of the SAML response is done with https://www.samltool.com/base64.php.
    @Test
    public void test_SAML_RESPONSE_XML() {
        String encodedResponse = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxzYW1sOkFzc2VydGlvbiBJRD0iSURfMjAzMDk2ODYtMzA1MS00ZmY4LWE5OWItZTkxMjhiNWQwOGUyIiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDQtMDlUMTg6NTc6NDMuMjQ0WiIgVmVyc2lvbj0iMi4wIg0KICAgICAgICAgICAgICAgIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiB4bWxuczpzYW1sPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj4NCiAgICA8c2FtbDpJc3N1ZXIgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+aHR0cDovL2xvY2FsaG9zdDoxMDAwMC9hdXRoL3JlYWxtcy9leHRlcm5hbA0KICAgIDwvc2FtbDpJc3N1ZXI+DQogICAgPGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPg0KICAgICAgICA8ZHNpZzpTaWduZWRJbmZvPg0KICAgICAgICAgICAgPGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPg0KICAgICAgICAgICAgPGRzaWc6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPg0KICAgICAgICAgICAgPGRzaWc6UmVmZXJlbmNlIFVSST0iI0lEXzIwMzA5Njg2LTMwNTEtNGZmOC1hOTliLWU5MTI4YjVkMDhlMiI+DQogICAgICAgICAgICAgICAgPGRzaWc6VHJhbnNmb3Jtcz4NCiAgICAgICAgICAgICAgICAgICAgPGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz4NCiAgICAgICAgICAgICAgICAgICAgPGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+DQogICAgICAgICAgICAgICAgPC9kc2lnOlRyYW5zZm9ybXM+DQogICAgICAgICAgICAgICAgPGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+DQogICAgICAgICAgICAgICAgPGRzaWc6RGlnZXN0VmFsdWU+ZmdlM0kvS2JiL1hucEQrRnBldlNFOEdTRDFNaFRFM1pHYUVyUWtaR3pPST08L2RzaWc6RGlnZXN0VmFsdWU+DQogICAgICAgICAgICA8L2RzaWc6UmVmZXJlbmNlPg0KICAgICAgICA8L2RzaWc6U2lnbmVkSW5mbz4NCiAgICAgICAgPGRzaWc6U2lnbmF0dXJlVmFsdWU+DQogICAgICAgICAgICAzdG9LZGxmWElSRmZraGp3UEZENXc0WUM4TFZDVDJPemNCUGJJb1dOek9IQUFWbElteGtIeC8vRE56UHZ3UW5uRTVxdEMySDFJcGxSZFNJN2dEVy95UlowTVRCWkRuUVN5d2h5am9TNHRxMkhBUDBIdjlUenZaVmx3MS9teHlqRTlnckJXQS9yVDFaSm9NOXkwRDBHVnVlUXVwVWthaXpQbzcwazF3WTkvL2FVZUMyNFVNTVEybFRBdXRmNXJtb1c5ZWRkUDY4QzFtbURPc1FhSGpWUm1jWkR4V29HK1F3eldxQW85S1ZzNzRSeTYyc0R3dTFDbmkxZnpOeVBZZEhWcWNGa1RmekMxRHRzSUlvU2dEUnNmZ2RtNGxHT0ZaUzRXUzl3QUZ2c29BVVI5a0E3NGFXd1JHVjZWdjRTRVlsNVRMUVhPL3dzY2w3aGtwWUNHdFQybWc9PQ0KICAgICAgICA8L2RzaWc6U2lnbmF0dXJlVmFsdWU+DQogICAgICAgIDxkc2lnOktleUluZm8+DQogICAgICAgICAgICA8ZHNpZzpLZXlOYW1lPlRlMHp1V3JERHZCZlltakVOOFBQbkRvUkxROGdxM0J5QkpweWV6UXZxSlE8L2RzaWc6S2V5TmFtZT4NCiAgICAgICAgICAgIDxkc2lnOlg1MDlEYXRhPg0KICAgICAgICAgICAgICAgIDxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT4NCiAgICAgICAgICAgICAgICAgICAgTUlJRGh6Q0NBbStnQXdJQkFnSUVRL05wTHpBTkJna3Foa2lHOXcwQkFRc0ZBREIwTVJBd0RnWURWUVFHRXdkVmJtdHViM2R1TVJBd0RnWURWUVFJRXdkVmJtdHViM2R1TVJBd0RnWURWUVFIRXdkVmJtdHViM2R1TVJBd0RnWURWUVFLRXdkVmJtdHViM2R1TVJJd0VBWURWUVFMRXdsSmJuWmxiblJoWjJVeEZqQVVCZ05WQkFNVERXTnZiUzVwYm5abGJuUmhaMlV3SGhjTk1Ua3dPVEUyTVRVd01UTTJXaGNOTkRjd01qQXhNVFV3TVRNMldqQjBNUkF3RGdZRFZRUUdFd2RWYm10dWIzZHVNUkF3RGdZRFZRUUlFd2RWYm10dWIzZHVNUkF3RGdZRFZRUUhFd2RWYm10dWIzZHVNUkF3RGdZRFZRUUtFd2RWYm10dWIzZHVNUkl3RUFZRFZRUUxFd2xKYm5abGJuUmhaMlV4RmpBVUJnTlZCQU1URFdOdmJTNXBiblpsYm5SaFoyVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEelgzY0RqRlRycEl5UVo0TkpWc2ZGQXdFc3lwQ2o3cnRleWtzbFRsd1N6dUlWVWJ4UG42aUVoQ3ZRR1hlQWZkUUJRRk9DMG1BL2x6NzhsdFFaZDhrVmVpRVVsdE9jeWhGVlp0bEQxTkh3Wi9od04vOFo1RTl1em80UklDM2ZWTFJUcmlhbmR0OHJvNkdKQWhRcVJWWmJHS2dTNEVVc05ScTBuTGpxVXROQndueUwyNGlVOE9FTlJmQ3gyOTgvMmI3blJQMXYvQ3hvVWJwcW5zOUozVXFPakdHYklKWFk5QmNrZ2ppeWQvOTNUaEZwYlcrRnFMM1MwTjl3b2t2a0hndEoxdkNzT08rQW40WGpqR2F1cGZiZ1VwaGlMMW9BdVZNSVBRWk4xSWFjT3RtT284WW4zQnZDbmFLTWhGS0NwQ256NlVtK1JmTmRCMXNpTEtCSHdrVlZBZ01CQUFHaklUQWZNQjBHQTFVZERnUVdCQlNxaUVjQ2JMZGNtR1JqUWx4NWdUS1lVcTdMOVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVRNemo2ai80ZVNza2FKamZITjFXZjRoeTlRSkRKSjM4UXA3NXN4MHJndzJhbVBJNWhITm5DOVlWZHIyY3N3alBxb0FnZkIrUTB3cklsY0kxVE1NbTJSUzdIaU1HN1BUZXJNYXJ2NUdPVHIxZGEvdmROOE9mbms5UTZsUDBNdHpYeGJ3TG1lRFpVc0RrZVM0WUVldDVVNFQrc1AvSnlpakhoQXoxNERyNEh0MFRXdzJEQ2VMell1aFJMZW0rUDI0VHR1QlZtQkJCd05mcVJTTURxZTNVR1haODk0eFdXc3NwQlJtYlRGWDJVSkNZaWdPOGxJMllzVDNEWHQwRlhxdUtlaVk0QUxPTDhmM1l5NkhNU3dmdk1HcEJURnZtS1ovK0NOemxyS3ZQVG5lU0N2djVZZHlVaDNmaDVEOUJFUEc0d3hCRmpZYXNab0dRV3krTFgyd01IUT09DQogICAgICAgICAgICAgICAgPC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT4NCiAgICAgICAgICAgIDwvZHNpZzpYNTA5RGF0YT4NCiAgICAgICAgICAgIDxkc2lnOktleVZhbHVlPg0KICAgICAgICAgICAgICAgIDxkc2lnOlJTQUtleVZhbHVlPg0KICAgICAgICAgICAgICAgICAgICA8ZHNpZzpNb2R1bHVzPg0KICAgICAgICAgICAgICAgICAgICAgICAgODE5M0E0eFU2NlNNa0dlRFNWYkh4UU1CTE1xUW8rNjdYc3BMSlU1Y0VzN2lGVkc4VDUrb2hJUXIwQmwzZ0gzVUFVQlRndEpnUDVjKy9KYlVHWGZKRlhvaEZKYlRuTW9SVldiWlE5VFI4R2Y0Y0RmL0dlUlBiczZPRVNBdDMxUzBVNjRtcDNiZks2T2hpUUlVS2tWV1d4aW9FdUJGTERVYXRKeTQ2bExUUWNKOGk5dUlsUERoRFVYd3NkdmZQOW0rNTBUOWIvd3NhRkc2YXA3UFNkMUtqb3hobXlDVjJQUVhKSUk0c25mL2QwNFJhVzF2aGFpOTB0RGZjS0pMNUI0TFNkYndyRGp2Z0orRjQ0eG1ycVgyNEZLWVlpOWFBTGxUQ0QwR1RkU0duRHJaanFQR0o5d2J3cDJpaklSU2dxUXA4K2xKdmtYelhRZGJJaXlnUjhKRlZRPT0NCiAgICAgICAgICAgICAgICAgICAgPC9kc2lnOk1vZHVsdXM+DQogICAgICAgICAgICAgICAgICAgIDxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+DQogICAgICAgICAgICAgICAgPC9kc2lnOlJTQUtleVZhbHVlPg0KICAgICAgICAgICAgPC9kc2lnOktleVZhbHVlPg0KICAgICAgICA8L2RzaWc6S2V5SW5mbz4NCiAgICA8L2RzaWc6U2lnbmF0dXJlPg0KICAgIDxzYW1sOlN1YmplY3Q+DQogICAgICAgIDxzYW1sOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIg0KICAgICAgICAgICAgICAgICAgICAgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+dGVzdA0KICAgICAgICA8L3NhbWw6TmFtZUlEPg0KICAgICAgICA8c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+DQogICAgICAgICAgICA8c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBOb3RPbk9yQWZ0ZXI9IjIwMjAtMDQtMTBUMDY6NTc6NDEuMjQ0WiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDoxMDAwMC9wb3N0YmluZGluZy9zeXJpdXMiLz4NCiAgICAgICAgPC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+DQogICAgPC9zYW1sOlN1YmplY3Q+DQogICAgPHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMDQtMDlUMTg6NTc6NDEuMjQ0WiIgTm90T25PckFmdGVyPSIyMDIwLTA0LTA5VDE4OjU4OjQxLjI0NFoiPg0KICAgICAgICA8c2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPg0KICAgICAgICAgICAgPHNhbWw6QXVkaWVuY2U+c3lyaXVzPC9zYW1sOkF1ZGllbmNlPg0KICAgICAgICA8L3NhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj4NCiAgICA8L3NhbWw6Q29uZGl0aW9ucz4NCiAgICA8c2FtbDpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjAtMDQtMDlUMTg6NTc6NDMuMjUzWiINCiAgICAgICAgICAgICAgICAgICAgICAgICBTZXNzaW9uSW5kZXg9IjJmYWEwODNmLTAxMzgtNDk2MC1iYTVkLWQ0MWI5YTE5M2E1Mjo6NTEwZmUwZGYtNjIzOS00NWY4LWFmZDAtNmQ1NmYwNDFlNmNkIj4NCiAgICAgICAgPHNhbWw6QXV0aG5Db250ZXh0Pg0KICAgICAgICAgICAgPHNhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6dW5zcGVjaWZpZWQNCiAgICAgICAgICAgIDwvc2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj4NCiAgICAgICAgPC9zYW1sOkF1dGhuQ29udGV4dD4NCiAgICA8L3NhbWw6QXV0aG5TdGF0ZW1lbnQ+DQogICAgPHNhbWw6QXR0cmlidXRlU3RhdGVtZW50Pg0KICAgICAgICA8c2FtbDpBdHRyaWJ1dGUgRnJpZW5kbHlOYW1lPSJ0ZXN0QXR0cmlidXRlIiBOYW1lPSJ0ZXN0QXR0cmlidXRlIg0KICAgICAgICAgICAgICAgICAgICAgICAgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+DQogICAgICAgICAgICA8c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj4NCiAgICAgICAgICAgICAgICB0ZXN0QXR0cmlidXRlVmFsdWUNCiAgICAgICAgICAgIDwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT4NCiAgICAgICAgPC9zYW1sOkF0dHJpYnV0ZT4NCiAgICAgICAgPHNhbWw6QXR0cmlidXRlIE5hbWU9IlJvbGUiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPg0KICAgICAgICAgICAgPHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+dGVzdFJvbGUNCiAgICAgICAgICAgIDwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT4NCiAgICAgICAgPC9zYW1sOkF0dHJpYnV0ZT4NCiAgICAgICAgPHNhbWw6QXR0cmlidXRlIE5hbWU9IlJvbGUiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPg0KICAgICAgICAgICAgPHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+DQogICAgICAgICAgICAgICAgb2ZmbGluZV9hY2Nlc3MNCiAgICAgICAgICAgIDwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT4NCiAgICAgICAgPC9zYW1sOkF0dHJpYnV0ZT4NCiAgICA8L3NhbWw6QXR0cmlidXRlU3RhdGVtZW50Pg0KPC9zYW1sOkFzc2VydGlvbj4=";
        final String encodedAssertion = SAMLUtils.getEncodedAssertion(encodedResponse);
        Assertions.assertEquals("", encodedAssertion);
    }

}
